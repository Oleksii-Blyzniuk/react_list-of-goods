{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","reverse","setState","sortBy","reset","this","goodsDone","goods","visibleGoods","sort","goods1","goods2","ALPHABET","localeCompare","LENGTH","length","getReorderedGoods","className","type","classNames","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAmBKA,E,0GAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA4CE,IAAME,EAAb,4MACEC,MAAyB,CACvBC,YAAY,EACZC,SAAU,GAHd,EAMEC,QAAU,WACR,EAAKC,UAAS,SAACJ,GAAD,MAAY,CACxBC,YAAaD,EAAMC,gBARzB,EAYEI,OAAS,SAACH,GACR,EAAKE,SAAS,CAAEF,cAbpB,EAgBEI,MAAQ,WACN,EAAKF,SAAS,CACZH,YAAY,EACZC,SAAU,KAnBhB,4CAuBE,WAAU,IAAD,OACP,EAAiCK,KAAKP,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACdM,EAzDH,SACLC,EADK,GAGJ,IADCP,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNS,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAQC,GACzB,OAAQX,GACN,KAAKL,EAASiB,SACZ,OAAOF,EAAOG,cAAcF,GAC9B,KAAKhB,EAASmB,OACZ,OAAOJ,EAAOK,OAASJ,EAAOI,OAChC,QACE,OAAO,MAIThB,GACFS,EAAaP,UAIRO,EAkCaQ,CAChBpB,EACAS,KAAKP,OAGP,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAaL,EAASiB,WAEtCQ,QAAS,kBAAM,EAAKjB,OAAOR,EAASiB,WANtC,iCAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAaL,EAASmB,SAEtCM,QAAS,kBAAM,EAAKjB,OAAOR,EAASmB,SANtC,4BAWA,wBACEI,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAfpB,IAEhBqB,QAASf,KAAKJ,QANhB,sBAWe,IAAbD,GAAkBD,IAClB,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAASf,KAAKD,MAHhB,sBAUJ,6BACE,6BACGE,EAAUe,KAAI,SAAAC,GAAI,OACjB,6BAAgBA,GAAPA,iBAhFvB,GAAyBC,IAAMC,WC5D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.01401919.chunk.js","sourcesContent":["/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport classNames from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goods1, goods2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return goods1.localeCompare(goods2);\n      case SortType.LENGTH:\n        return goods1.length - goods2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n  // eslint-disable-next-line no-console\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    isReversed: false,\n    sortType: 0,\n  };\n\n  reverse = () => {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortBy = (sortType: number) => {\n    this.setState({ sortType });\n  };\n\n  reset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: 0,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const goodsDone = getReorderedGoods(\n      goodsFromServer,\n      this.state,\n    );\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET },\n            )}\n            onClick={() => this.sortBy(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )}\n            onClick={() => this.sortBy(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-warning',\n              { 'is-light': isReversed === false },\n            )}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== 0 || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          <ul>\n            {goodsDone.map(good => (\n              <li key={good}>{good}</li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}